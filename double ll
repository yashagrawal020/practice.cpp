
#include<bits/stdc++.h>
using namespace std;


class node{
public:
	
	int data;
	
	node* prev;
	node* next;
	
	
	// constructor
	node(int data)
	{
		this -> data = data;
		this->next = NULL;
		this -> next = NULL;
	}
	
	// destructor
	
	~node ()
	{
		int value = this-> data;
		if(this-> next != NULL)
		{
			delete next;
			this->next = NULL;
		}
		
		cout << "memory has been freed for node with data" << " " <<value << endl;
	}
};


void insertathead(node* &head,int data)
{
	
	if(head == NULL)
	{
		node* temp = new node(data);
		head = temp;

	}
	else{
		node* temp = new node(data);
	
	temp -> next = head;
	head ->prev = temp;
	head = temp; 
	}
	
}

void insertattail(node* &tail,node* &head, int data)
{
	
	if(tail == NULL)
	{
		node* temp = new node(data);
		
		tail = temp;
		head = temp;
	}
	else
	{
	node* temp = new node(data);
	tail -> next = temp;
	temp->prev = tail;
	
	temp = tail;
	}
	
}

void deletenode(int position, node* &head)
{
	// deleting starting node
	if(position == 1)
	{
		node*temp = head;
		
		temp->next->prev = NULL;
		head = temp->next;
		 
		temp-> next = NULL; 
		delete temp;
	}
	else
	{
		node* current = head;
		node* prev = NULL;
		
		int cnt = 1;
		
		while(cnt < position)
		{
			prev = current;
			
			current = current->next;
			cnt++;
		}
		
		current -> prev = NULL;
		
		prev->next = current->next;
		
		current-> next = NULL;
		
		delete current;
		
	}
}

void insertatpos(node* &head,node* &tail,int position,int data)
{
	
	if(position == 1)
	{
		insertathead(head,data);
		return;
	}
	node*temp = head;
	int cnt = 1;
	
	while(cnt < position-1)
	{
		temp = temp->next;
		cnt ++;
	}
	
	if(temp->next == NULL)
	{
		insertattail(tail,head,data);
		return;
	}
	else
	{
		
	node* nodetoinsert = new node(data);
	
	nodetoinsert -> next = temp -> next;
	
	temp->next->prev = nodetoinsert;
	temp -> next = nodetoinsert;
	
	nodetoinsert-> prev = temp;
	
	}
}


void printList(node * n)
	
{
    while (n != NULL) {
    	
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}


int main()

{
	
	node* node1 = new node(10);
	node* head = node1;
	
	node* tail = node1;

	
	insertathead(head,15);

	
	insertattail(tail,head,55);
	
	
	insertatpos(head,tail,1,5);
	
	//insertatpos(head,tail,5 ,100);
	
	printList(head);
		
	
	

	
	
}

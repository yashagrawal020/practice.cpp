/*
     ॐ त्र्यम्बकं यजामहे सुगन्धिं पुष्टिवर्धनम् |
     उर्वारुकमिव बन्धनान्मृत्योर्मुक्षीय माऽमृतात् ||
     
     ****** YASH AGRAWAL ********
*/
#include<bits/stdc++.h>
#include <iostream>
#include <algorithm>
#define int long long int
#define take(x) for(auto& a:x)cin>>a
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define arrmin(x) *min_element(all(x))
#define arrmax(x) *max_element(all(x))
#define arrsum(x) accumulate(all(x), 0LL)
#define arrpre(x) partial_sum(all(x), x.begin())
#define arrsuf(x) partial_sum(allr(x), x.rbegin())
#define give(x) for(auto a:x){cout<<a<<' ';}cout<<endl
#define PI 3.1415926535897932384626
#define F              first
#define S              second
#define pb             push_back
#define si             set <int>
#define vi             vector <int>
#define pii            pair <int, int>
#define vpi            vector <pii>
#define vpp            vector <pair<int, pii>>
#define mii            map <int, int>
#define mpi            map <pii, int>
#define spi            set <pii>
#define double         long double
#define que_max        priority_queue <int>
#define que_min        priority_queue <int, vi, greater<int>>
#define mini  *min_element(a,a + n);
#define maxi  *max_element(a,a + n);
#define maxis *max_element(s.begin(),s.end());
#define minis *min_element(s.begin(),s.end());
#define yes cout << "YES" << endl;
#define no cout << "NO" << endl;
#define ppc(x) __builtin_popcount(x);
#define ppcl(x) __builtin_popcountll(x);
#define clz(x) __builtin_clz(x); // // Leading zeroes count
#define ctz(x) __builtin_ctz(x); // Trailing zeroes count
#define nline endl;
using namespace std;
 
 
 
 
int gcd( int n1, int n2){  
    if(n2==0)
        return n1;
    return gcd(n2,n1%n2);
}  
int lcm (int n1, int n2)  {    
 
return  (n1 / gcd(n1, n2)) * n2;
 
}  
 
int no_of_digits(int n)
{
    return (floor(log10(n)) + 1);
}
 
bool isPrime(int n)
{
    // Corner case
    if (n <= 1)
        return false;
 
    // Check from 2 to square root of n
    for (int i = 2; i <= sqrt(n); i++)
        if (n % i == 0)
            return false;
 
    return true;
}
 
 
int largestPower(int n, int p)
{
    // Initialize result
    int x = 0;
 
    // Calculate x = n/p + n/(p^2) + n/(p^3) + ....
    while (n) {
        n /= p;
        x += n;
    }
    return x;
}
 
 
 
int mex(int n)
{
    int k=0;
    if(k!=n)return k;
    return k+1;
}
 
bool sortbysecdesc(const pair<int,int> &a,
        const pair<int,int> &b)
{
 
    if(a.first == b.first){
        return a.second <b.second;
    }
    else
    return a.first>b.first;
}
 
int BinarySearchUminus(int val, vector<int> &A)
{
    int low = 0 ,high = A.size()-1;
 
    while (high>low)
    {
        int mid = (low + high+1)/2;
        if(A[mid] == val)
        low = mid; // high = mid-1 for lower_bound-1
        else
        if(A[mid]<val)
        low = mid;
        else
        high = mid -1;
 
    }
    if(A[low] > val)
    return -1;
    return low;
    
}
 
int number_of_factors_sqrt_time(int x)
{
    vector <int> result;
    int i = 1;
    // This will loop from 1 to int(sqrt(x))
    while(i*i <= x) {
        // Check if i divides x without leaving a remainder
        if(x % i == 0) {
            result.push_back(i);
            // Handle the case explained in the 4th
            if(x/i != i) {
                result.push_back(x/i);
            }
        }
        i++;
    }
    return result.size();
}
 
int palindrome(vector<int> arr)
{
    // Initialise flag to zero.
    int flag = 0;
 
    int n = arr.size();
 
    // Loop till array size n/2.
    for (int i = 0; i <= n / 2 && n != 0; i++) {
 
        // Check if first and last element are different
        // Then set flag to 1.
        if (arr[i] != arr[n - i - 1]) {
            flag = 1;
            break;
        }
    }
 
    if (flag == 1)
        return 0;
    else
        return 1;
}
 
int highestPoweroftwo(int n)
{
    int p = (int)log2(n);
    return (int)pow(2, p);
    
    // int res = 0;
    // for (int i = n; i >=1; i--)
    // {
    //     /* code */
    //     if((i&(i-1)) == 0)
    //     {
    //         res = i;
    //         break;
    //     }
    // }
    // return res;
}
 
 
int ceil(int a , int b)
{
    int ans = a/b;
    if(a%b!=0)
    ans++;
    return ans;
}
 
bool compare(pair<int,int>a,pair<int,int>b){
//sort  pairs in decreasing order of the second elements
//of the pairs.If both the second elements are equal sort
//according to increasing order of the first elements of the pairs.
    if(a.second==b.second)
    return a.first<b.first;
    return a.second>b.second;
}
 
 

 
void driver()
{



//  FIND PIVOT ELEMENT USING BINARY SEARCH IN A ROTATED ARRAY
    
// USING THIS FIND THE NUMBER OF TIMES AN ARRAY IS RORATED.

int n; cin >> n;

int a[n];

for(int i=0;i<n;i++)  cin >> a[i];
    
int s = 0, e = n-1;


while(s<e)
{
    int mid = (s+e)/2;
    
    
    if(a[mid] >= a[0])
    {
        s = mid +1;
    }
    else
        e = mid;
}

cout << s << endl;





// NOTE

// DIVYANSHU BHAIYA NOTES THIS GIVES THE POSITION OF MAX ELEMENT

while(s<=e)
{
    int mid = (s+e)/2;
    
    int prev = (mid + n - 1) % n;
    
    int nxt = (mid + 1)%n;
    if(a[mid] > a[nxt] && a[mid] > a[prev])
    {
       cout << mid << endl;
       return;
    }
    else if( a[mid] >= a[s])
        s = mid+1;
    else
        e = mid-1;
}

}




    

    
 
        
 
 
 
 
 
    
    
 
        
 
 
 
  
 
    
 
 
 
 
 
 
    
 
 
 
 
    
 
    
int32_t main()
{
    
    ios_base::
    sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    
    #ifndef ONLINE_JUDGE
    freopen("input1.txt" , "r" ,stdin);
    freopen("output1.txt" , "w" ,stdout);
    #endif
    
    clock_t z = clock();
 
 
  int t;
    //int t = 1;
cin >> t;
while(t--)
    {
        


       driver();
   }
    cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC);
     
} 
 
 
